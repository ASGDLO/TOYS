stages:
  - terraform
  - ansible
  - deploy

variables:
  TF_VAR_region: "us-east-1"
  TF_STATE_BUCKET: "your-terraform-state-bucket"
  TF_STATE_KEY: "eks-cluster/terraform.tfstate"
  AWS_DEFAULT_REGION: "us-east-1"

before_script:
  - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
  - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
  - export AWS_DEFAULT_REGION=$TF_VAR_region
  - curl -sSL https://sdk.cloud.google.com | bash
  - source ~/.bashrc
  - curl -sSL https://get.helm.sh/helm-v3.8.0-linux-amd64.tar.gz | tar -xz
  - mv linux-amd64/helm /usr/local/bin/helm

terraform:
  stage: terraform
  image: hashicorp/terraform:1.3.5
  script:
    - cd infrastructure
    - terraform init -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="key=${TF_STATE_KEY}" -backend-config="region=${TF_VAR_region}"
    - terraform apply -auto-approve
  artifacts:
    paths:
      - infrastructure/outputs.tf
  only:
    - main

ansible:
  stage: ansible
  image: williamyeh/ansible:latest
  script:
    - ansible-playbook ansible/install_argocd.yml -i "localhost,"
  dependencies:
    - terraform
  only:
    - main

deploy:
  stage: deploy
  image: argoproj/argocd:latest
  script:
    - export KUBECONFIG=$(terraform output -raw eks_cluster_endpoint)
    - argocd login argocd-server.argocd.svc.cluster.local:443 --username admin --password $ARGOCD_PASSWORD --insecure
    - argocd app create my-app \
        --repo https://gitlab.com/your-repo/your-app.git \
        --path app/manifests \
        --dest-server https://kubernetes.default.svc \
        --dest-namespace default
    - argocd app sync my-app
  dependencies:
    - ansible
  only:
    - main